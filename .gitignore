using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.Animations.Rigging;
using UnityEngine.Animations;
using Cinemachine;



namespace ayoublgr
{
    public class Player_Movements : MonoBehaviour
    {
        CharacterController controller;
        Animator _anim;

        [Header("movements vars")]
        [SerializeField] float speed, jumpForce, gravity, timeToJumpApex = 0.4f;

        [Header("var")]
        public Transform Camera;
        public float rotationSpeed = 10f;
        private Quaternion cameraStartRotation;

        [Header("bool")]
        [SerializeField]
        private bool isGrounded, isJumping, justLanded, isRunning, canRun;

        [Header("Jumping cooldown")]
        public float cooldown = 1.0f;
        public float cooldownTimer = 0.0f;

        Vector3 velocity;

        void Start()
        {
            Cursor.lockState = CursorLockMode.Locked;
            Cursor.visible = false;
            controller = GetComponent<CharacterController>();
            _anim = GetComponent<Animator>();

            // Calculate gravity and jump velocity
            gravity = -(2 * jumpForce) / Mathf.Pow(timeToJumpApex, 2);
        }

        void Update()
        {
            isGrounded = controller.isGrounded;
            if (velocity.y < 0 && isGrounded)
            {
                velocity.y = -2f;

                _anim.SetBool("jump", false);
            }
            
            // If the player just landed, trigger the landing animation and start the cooldown timer
            if (justLanded)
            {
                _anim.SetBool("land", true);
                justLanded = false;
                cooldownTimer = cooldown;
            }

            // Disable movement while the cooldown timer is running
            if (cooldownTimer > 0)
            {
                cooldownTimer -= Time.deltaTime;
                controller.Move(Vector3.zero);
            }
            // When the cooldown timer is over, reset the landing animation and allow movement again
            else
            {
                _anim.SetBool("land", false);
            }

            // Check if the player is falling
            if (!isGrounded)
            {
                _anim.SetBool("Falling", true);
                falltime += Time.deltaTime;
                if (falltime >= 1f)
                {
                    // Player has fallen for 1 second, enable movement again
                    justLanded = true;
                    falltime = 0f;
                }
            }
            else
            {
                _anim.SetBool("Falling", false);
            }

                    if (!isGrounded)
                        _anim.SetBool("Falling", true);
                    else
                        _anim.SetBool("Falling", false);


            // If the player just landed, trigger the landing animation
            if (justLanded)
            {
                _anim.SetBool("land", true);
                justLanded = false;
            }

            float x = Input.GetAxisRaw("Horizontal");
            float z = Input.GetAxisRaw("Vertical");

            _anim.SetFloat("h", x, .1f, Time.deltaTime);
            _anim.SetFloat("v", z, .1f, Time.deltaTime);


            // Calculate the move direction
            Vector3 cameraForward = Camera.forward;
            Vector3 cameraRight = Camera.right;
            cameraForward.y = 0f;
            cameraRight.y = 0f;
            cameraForward = cameraForward.normalized;
            cameraRight = cameraRight.normalized;
            Vector3 moveDir = cameraForward * z + cameraRight * x;
            moveDir.Normalize();


            Quaternion targetRotation = cameraStartRotation;
            if (Camera != null && Mathf.Abs(Input.GetAxisRaw("Mouse X")) >= 0)
            {
                targetRotation = Quaternion.Euler(0f, Camera.eulerAngles.y, 0f);
            }
            transform.rotation = Quaternion.Lerp(transform.rotation, targetRotation, Time.deltaTime * rotationSpeed);


            controller.Move(moveDir * speed * Time.deltaTime);
            if (moveDir.magnitude > .5f)
            {
                canRun = true;
            }
            else canRun = false;

            if (canRun && Input.GetKeyDown(KeyCode.LeftShift))
            {
                speed = speed * 2;
                _anim.SetBool("run", true);
                isRunning = true;
            }

            if (Input.GetKeyUp(KeyCode.LeftShift))
            {
                speed = 3;
                _anim.SetBool("run", false);
                isRunning = false;
            }

            // Check if the player just landed from a jump
            if (isJumping && !justLanded && velocity.y < 0 && isGrounded || !isGrounded)
            {
                justLanded = true;
            }

            if (!isGrounded && cooldownTimer <= 0)
            {
                cooldownTimer = cooldown;
            }

            if (cooldownTimer > 0)
            {
                cooldownTimer -= Time.deltaTime;
            }

            if (Input.GetButtonDown("Jump") && isGrounded && cooldownTimer <= 0)
            {
                isJumping = true;
                jump();
            }

            velocity.y += gravity * Time.deltaTime;
            controller.Move(velocity * Time.deltaTime);
        }

        void jump()
        {
            _anim.SetBool("jump", true);
            velocity.y = Mathf.Sqrt(jumpForce * -2f * gravity);
        }

        public void ResetJustLanded()
        {
            _anim.SetBool("land", false);
            justLanded = false;
            isJumping = false;
        }

    
    }
}
